[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	default = simple

[color]
	ui = always

[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

[alias]

  #############################################################################
  # Explore your history, the commits and the code                            #
  #############################################################################

  # List commits in short form, with colors and branch/tag annotations
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

  # List commits in short form, with colors and branch/tag annotations and branch graph
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit

  # List commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  # List with no colors just in case you need to chain the out put with Unix pipes
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  # List commits showing dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn\\ %cr]" --decorate --date=short
  # List commits showing relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  # Default short git log with no colors/formats
  le = log --online --decorate

  #############################################################################
  # Show the history of a file, with diffs                                    #
  #############################################################################

  # See all the commits related to a file
  fl = log -u

  #############################################################################
  # Log commands to inspect (recent) history                                  #
  #############################################################################

  # Show modified files in last commit
  dl = "!git ll -1"
  # Show a diff last commit
  dlc = diff --cached HEAD^
  # Show content (full diff) of a commit given a revistion
  dr = "!f() { git diff "$1"^.."$1"; }; f"
  lc = "!f() { git ll "$1"^.."$1"; }; f"

  #############################################################################
  # Finding files and content inside files (grep                              #
  #############################################################################
  # usage $ git <alias> <String>

  # Find a file path in codebase
  f = "!git ls-files | grep -i"
  # Search/grep your entire codebase for a string
  gr = grep -Ii
  # Grep from root folder
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

  #############################################################################
  # List all your aliases                                                     #
  #############################################################################

  la = "!git config -l | grep alias | cut -c 7-"

  #############################################################################
  # Rename [branch] to done-[branch]                                          #
  #############################################################################

  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I {} git branch -m {} done/{}; }; f"
  bug = "!f() { echo "$1" | xargs -I {} git checkout -b bug/DRCWBTE-{}; }; f"
  feature = "!f() { echo "$1" | xargs -I {} git checkout -b feature/{}; }; f"
  spike = "!f() { echo "$1" | xargs -I {} git checkout -b spike/{}; }; f"

  #############################################################################
  # Assume aliases                                                            #
  #############################################################################

  # assume a file as unchanged
  a = update-index --assume-unchanged

  # Unassume a file
  ua = update-index --no-assume-unchanged

  # Show assumed files
  ad = "!git ls-files -v | grep ^h | cut -c 3-"

  # Unassume all the assumed file
  ual = "!git assumed | xargs git update-index --no-assume-unchanged"

  # Assume all
  al = "!git st -s | awk {'print $s} | xargs git assume"

  #############################################################################
  # Tag aliases                                                               #
  #############################################################################

  # Show the last tag
  lt = describe --tags --abbrev=0

  #############################################################################
  # Merge aliases                                                             #
  #############################################################################

  or = "!f() { git co --ours $@ && git add $@; }; f"
  tr = "!f() { git co --theirs $@ && git add $@; }; f"

  #############################################################################
  # Basic Shortcuts                                                           #
  #############################################################################

  cp = cherry-pick
  st = status -s
  cl = clone
  ci = commit
  cam = commit -a -m
  co = checkout
  br = branch
  diff = diff --word-diff
  cd = diff --cached

  #############################################################################
  # Reset Commands                                                            #
  #############################################################################

  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard

  #############################################################################
  # Git-svn shortcuts                                                         #
  #############################################################################

  svnr = svn rebase
  svnd = svn dcommit
  svn = svn log --oneline --show-commit

  #############################################################################
  # Stash operations                                                          #
  #############################################################################

  sl = stash list
  sa = stash apply
  ss = stash save
[core]
  editor = mvim -v
